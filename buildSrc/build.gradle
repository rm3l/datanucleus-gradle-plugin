//MIT License
//
//Copyright (c) 2018 Armel Soro
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

plugins {
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.10.1'
}
apply from: "$rootDir/integration-test.gradle"
apply from: "$rootDir/functional-test.gradle"

group 'org.rm3l'
//version '1.0.181224-SNAPSHOT'
version '1.3.1'

ext {
    datanucleusCoreVersion = '5.2.2'
    datanucleusAccessPlatformJpaRdbmsVersion = '5.2.2'
    datanucleusApiJpaVersion = '5.2.1'
    datanucleusApiJdoVersion = '5.2.2'
    javaxJdoVersion = '3.+'
    jpaVersion = '2.+'
    javapoetVersion = '1.11.1'
    junitVersion = '5.5.2'
    junitPioneerVersion = '0.4.2'
    h2Version = '1.4.200'
    mockitoVersion = '3.2.4'
    systemRulesVersion = '1.19.0'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.datanucleus:datanucleus-core:${datanucleusCoreVersion}"
    implementation "org.datanucleus:javax.jdo:${javaxJdoVersion}"
    implementation "org.datanucleus:javax.persistence:${jpaVersion}"
    implementation "org.datanucleus:datanucleus-api-jpa:${datanucleusApiJpaVersion}"
    implementation "org.datanucleus:datanucleus-api-jdo:${datanucleusApiJdoVersion}"

    testImplementation gradleTestKit()
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.junit-pioneer:junit-pioneer:${junitPioneerVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "com.squareup:javapoet:${javapoetVersion}"
    testImplementation "com.github.stefanbirkner:system-rules:${systemRulesVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly "org.datanucleus:datanucleus-accessplatform-jpa-rdbms:${datanucleusAccessPlatformJpaRdbmsVersion}"
    testRuntimeOnly "com.h2database:h2:${h2Version}"
}

jacoco {
    toolVersion = "0.8.4"
}

tasks.withType(Test) {
    useJUnitPlatform()
    maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}

gradlePlugin {
    plugins {
        datanucleusPlugin {
            id = 'org.rm3l.datanucleus-gradle-plugin'
            implementationClass = 'org.rm3l.datanucleus.gradle.DataNucleusPlugin'
        }
    }
}

jacocoTestReport {
    executionData fileTree(buildDir).include("/jacoco/*.exec")
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport.dependsOn functionalTest

// The configuration example below shows the minimum required properties
// configured to publish your plugin to the plugin portal
pluginBundle {
    website = 'https://datanucleus-gradle-plugin.rm3l.org'
    vcsUrl = 'https://github.com/rm3l/datanucleus-gradle-plugin'
    description = 'Unofficial Gradle Plugin for DataNucleus JPA/JDO provider'
    tags = ['jpa', 'jdo', 'orm', 'javax-persistence', 'persistence', 'metamodel', 'enhancement', 'weaving', 'datanucleus', 'schemagen', 'schema', 'generate', 'pojo', 'bytecode']

    plugins {
        datanucleusPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'DataNucleus Gradle Plugin'
        }
    }
}

publishing {
    publications {
        pluginPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId "datanucleus-gradle-plugin"
            version project.version
        }
    }
}

